# -*- coding: utf-8 -*-
"""streamlit_app.py

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1NpA23k8u_hHl3Mn6smWNwZukVK2Qh8H3
"""

import streamlit as st
import torch
from torchvision import transforms
from PIL import Image
import openai
import io
import joblib
import numpy as np

# Title
st.set_page_config(page_title="AgriPredictAI - Crop Advisor", layout="centered")
st.title("AgriPredictAI: Crop Disease & Yield Advisor")

# Load Disease Detection Model
@st.cache_resource
def load_disease_model():
    model = torch.load("disease_model.pt", map_location=torch.device("cpu"))
    model.eval()
    return model

# Load Yield Prediction Model
@st.cache_resource
def load_yield_model():
    return joblib.load("yield_model.pkl")

disease_model = load_disease_model()
yield_model = load_yield_model()

# Label map for the 17 classes
label_map = {
    0: 'Corn - Common Rust',
    1: 'Corn - Gray Leaf Spot',
    2: 'Corn - Healthy',
    3: 'Corn - Northern Leaf Blight',
    4: 'Potato - Early Blight',
    5: 'Potato - Healthy',
    6: 'Potato - Late Blight',
    7: 'Rice - Brown Spot',
    8: 'Rice - Healthy',
    9: 'Rice - Leaf Blast',
    10: 'Rice - Neck Blast',
    11: 'Sugarcane - Bacterial Blight',
    12: 'Sugarcane - Healthy',
    13: 'Sugarcane - Red Rot',
    14: 'Wheat - Brown Rust',
    15: 'Wheat - Healthy',
    16: 'Wheat - Yellow Rust'
}

# Define transform
transform = transforms.Compose([
    transforms.Resize((300, 300)),
    transforms.ToTensor()
])

# Disease Detection Section
from predict_disease import predict_disease

if section == "Crop Disease Detection":
    st.header("Crop Disease Detection")

    uploaded_image = st.file_uploader("Upload a crop Image", type=["jpg", "png", "jpeg"])

    if uploaded_image is not None:
        st.image(uploaded_image, caption="Uploaded Image", use_column_width=True)

        if st.button("Diagnose Disease"):
            with st.spinner("Analyzing image..."):
                result = predict_disease(uploaded_image)
            st.success(f"Prediction: **{result}**")


    # Ask GPT for advice
    st.subheader("AI Advice")
    openai.api_key = st.secrets["OPENAI_API_KEY"]
    prompt = f"Act like an agricultural assistant expert, a farmer uploaded a crop image classified as '{label}'. Explain to the farmer what this means and recommend what they should do to manage or treat the issue."

    with st.spinner("Thinking..."):
        response = openai.ChatCompletion.create(
            model="gpt-3.5-turbo",
            messages=[
                {"role": "system", "content": "You are an agricultural assistant helping Nigerian farmers understand crop diseases."},
                {"role": "user", "content": prompt}
            ],
            temperature=0.7,
            max_tokens=500
        )
        advice = response.choices[0].message["content"]

    st.info(advice)

# Crop Yield Prediction Section
from predict_yield import predict_yield

if section == "Crop Yield Prediction":
    st.header("Crop Yield Prediction")

    crop_type = st.selectbox("Select Crop Type", ["Corn", "Potato", "Rice", "Sugarcane", "Wheat"])
    soil_type = st.selectbox("Select Soil Type", ["Clay", "Loamy", "Peaty", "Saline", "Sandy"])
    soil_ph = st.slider("Soil pH", 3.0, 9.0, 6.5)
    temperature = st.slider("Temperature (°C)", 10.0, 50.0, 30.0)
    humidity = st.slider("Humidity (%)", 10.0, 100.0, 70.0)
    wind_speed = st.slider("Wind Speed (km/h)", 0.0, 30.0, 10.0)
    n = st.slider("Nitrogen (N)", 0, 200, 50)
    p = st.slider("Phosphorus (P)", 0, 200, 50)
    k = st.slider("Potassium (K)", 0, 200, 50)
    soil_quality = st.slider("Soil Quality (0=poor, 1=average, 2=good)", 0, 2, 1)

    if st.button("Predict Yield"):
        data = {
            'crop_type': crop_type,
            'soil_type': soil_type,
            'soil_ph': soil_ph,
            'temperature': temperature,
            'humidity': humidity,
            'wind_speed': wind_speed,
            'n': n,
            'p': p,
            'k': k,
            'soil_quality': soil_quality
        }

        yield_prediction = predict_yield(data)
        st.success(f"Predicted Crop Yield: {yield_prediction:.2f} tonnes per hectare")

        # GPT-based Analysis
        st.subheader("AI Yield Analysis")
        yield_prompt = f"A farmer provided the following conditions for {crop_type} crop: Soil Type = {soil_type}, Soil pH = {soil_pH}, Temperature = {temperature}°C, Humidity = {humidity}%, Wind Speed = {wind_speed} km/h, N = {nitrogen}, P = {phosphorus}, K = {potassium}, Soil Quality = {soil_quality}. The predicted yield is {prediction:.2f} tons/hectare. Act like an agricultural assistant expert, give an expert analysis on this yield and how it can be improved."

        with st.spinner("Analyzing..."):
            yield_response = openai.ChatCompletion.create(
                model="gpt-3.5-turbo",
                messages=[
                    {"role": "system", "content": "You are an agricultural assistant helping Nigerian farmers optimize crop yield."},
                    {"role": "user", "content": yield_prompt}
                ],
                temperature=0.7,
                max_tokens=500
            )
            yield_advice = yield_response.choices[0].message["content"]

        st.info(yield_advice)

st.markdown("""
---
Powered by EfficientNet-B3 + Scikit-Learn + GPT-3.5 | Built for Nigerian farmers
""")