# -*- coding: utf-8 -*-
"""Crop_Disease_Detection

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1NpA23k8u_hHl3Mn6smWNwZukVK2Qh8H3
"""

import streamlit as st
import torch
import os
import gdown
from PIL import Image
import torchvision.transforms as transforms
import openai

# ----------------- CONFIG -----------------
st.set_page_config(page_title="Crop Disease Diagnosis", layout="centered")

DISEASE_MODEL_ID = "1O-K4s3tv3WTSouhUksPDA5u6gNQ_d0j1"
DISEASE_MODEL_PATH = "best_crop_disease_model.pt"

DISEASE_CLASSES = ['Corn___Common_Rust', 'Corn___Gray_Leaf_Spot', 'Corn___Healthy', 'Corn___Northern_Leaf_Blight', 'Potato___Early_Blight',
                   'Potato___Healthy', 'Potato___Late_Blight', 'Rice___Brown_Spot', 'Rice___Healthy', 'Rice___Leaf_Blast',
                   'Rice___Neck_Blast', 'Sugarcane__Bacterial_Blight', 'Sugarcane__Healthy', 'Sugarcane__Red_Rot', 'Wheat___Brown_Rust',
                   'Wheat___Healthy', 'Wheat___Yellow_Rust']

# ----------------- MODEL -----------------
def download_model():
    if not os.path.exists(DISEASE_MODEL_PATH):
        url = f"https://drive.google.com/uc?id={DISEASE_MODEL_ID}"
        gdown.download(url, DISEASE_MODEL_PATH, quiet=False)

@st.cache_resource
def load_model():
    download_model()
    model = torch.load(DISEASE_MODEL_PATH, map_location=torch.device("cpu"))
    model.eval()
    return model

def preprocess_image(image_file):
    image = Image.open(image_file).convert("RGB")
    transform = transforms.Compose([
        transforms.Resize((224, 224)),
        transforms.ToTensor()
    ])
    return transform(image).unsqueeze(0)

def predict_disease(image_file):
    model = load_model()
    input_tensor = preprocess_image(image_file)
    outputs = model(input_tensor)
    _, predicted = torch.max(outputs, 1)
    return DISEASE_CLASSES[predicted.item()]

# ----------------- GPT ADVICE -----------------
def get_gpt_advice(disease_label):
    prompt = (
        f"A Nigerian farmer uploaded a crop image, and it was classified as '{disease_label}'. "
        "Act like a Nigerian agricultural extension officer. Explain what this disease is, its effect on the crop, "
        "and give actionable treatment or management tips for the farmer in Nigeria."
    )
    response = openai.ChatCompletion.create(
        model="gpt-3.5-turbo",
        messages=[
            {"role": "system", "content": "You are an agricultural assistant helping Nigerian farmers understand crop diseases."},
            {"role": "user", "content": prompt}
        ],
        temperature=0.7,
        max_tokens=500
    )
    return response.choices[0].message["content"]

# ----------------- MAIN APP -----------------
def main():
    st.title("Crop Disease Diagnosis")
    st.write("Upload a crop image to detect diseases and get expert treatment advice.")

    uploaded_file = st.file_uploader("Upload Crop Image", type=["jpg", "jpeg", "png"])

    if uploaded_file:
        st.image(uploaded_file, caption="Uploaded Image", use_column_width=True)

        if st.button("Diagnose Disease"):
            with st.spinner("Analyzing image..."):
                prediction = predict_disease(uploaded_file)
            st.success(f"Prediction: **{prediction}**")

            st.subheader("Expert Advice")
            try:
                openai.api_key = st.secrets["OPENAI_API_KEY"]
                with st.spinner("Getting advice from GPT..."):
                    advice = get_gpt_advice(prediction)
                st.info(advice)
            except Exception as e:
                st.error("‚ùå Failed to get GPT advice.")
                st.exception(e)

    st.markdown("---")
    st.caption("üöÄ Powered by EfficientNet + PyTorch + GPT-3.5 | Built with ‚ù§Ô∏è for Nigerian Farmers üá≥üá¨")

if __name__ == "__main__":
    main()