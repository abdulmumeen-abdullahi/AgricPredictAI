# -*- coding: utf-8 -*-
"""Crop_Disease_Detection

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1NpA23k8u_hHl3Mn6smWNwZukVK2Qh8H3
"""

import streamlit as st
import torch
import os
import gdown
from PIL import Image
import torchvision.transforms as transforms
import openai
from openai import OpenAI, RateLimitError

# ----------------- CONFIG -----------------
st.set_page_config(page_title="NaijaFarmConsultAI - Crop Disease", layout="centered")

# Load OpenAI Key securely
os.environ['OPENAI_API_KEY'] = st.secrets['OPENAI_API_KEY']
openai.api_key = st.secrets["OPENAI_API_KEY"]

# ----------------- MODEL PATHS -----------------
DISEASE_MODEL_ID = "1O-K4s3tv3WTSouhUksPDA5u6gNQ_d0j1"
DISEASE_MODEL_PATH = "best_crop_disease_model.pt"

DISEASE_CLASSES = [
    'Corn___Common_Rust', 'Corn___Gray_Leaf_Spot', 'Corn___Healthy', 'Corn___Northern_Leaf_Blight',
    'Potato___Early_Blight', 'Potato___Healthy', 'Potato___Late_Blight',
    'Rice___Brown_Spot', 'Rice___Healthy', 'Rice___Leaf_Blast', 'Rice___Neck_Blast',
    'Sugarcane__Bacterial_Blight', 'Sugarcane__Healthy', 'Sugarcane__Red_Rot',
    'Wheat___Brown_Rust', 'Wheat___Healthy', 'Wheat___Yellow_Rust'
]

# ----------------- MODEL LOADER -----------------
def download_model():
    if not os.path.exists(DISEASE_MODEL_PATH):
        url = f"https://drive.google.com/uc?id={DISEASE_MODEL_ID}"
        gdown.download(url, DISEASE_MODEL_PATH, quiet=False)

@st.cache_resource
def load_model():
    download_model()
    model = torch.load(DISEASE_MODEL_PATH, map_location=torch.device("cpu"))
    model.eval()
    return model

def preprocess_image(image_file):
    image = Image.open(image_file).convert("RGB")
    transform = transforms.Compose([
        transforms.Resize((224, 224)),
        transforms.ToTensor()
    ])
    return transform(image).unsqueeze(0)

def predict_disease(image_file):
    model = load_model()
    input_tensor = preprocess_image(image_file)
    outputs = model(input_tensor)
    _, predicted = torch.max(outputs, 1)
    return DISEASE_CLASSES[predicted.item()]

# ----------------- GPT CONTEXT -----------------
system_prompt = [
    {"role": "system", "content": """
        You are NaijaFarmConsultAI, a friendly and knowledgeable agricultural extension officer in Nigeria. 
        You assist farmers with advice about crop diseases, management practices, and prevention. 
        Use simple, local, and clear terms when explaining plant diseases. Maintain a warm tone like a trusted advisor.

        RESPONSE FLOW:
        1. Greet and confirm the identified crop disease.
        2. Explain what the disease is and its effect.
        3. Recommend 3 simple treatment or control steps.
        4. Give one prevention tip for the future.
        5. Do not encourage follow-up questions. Only provide advice based on the diagnosis.

    """}
]

def get_completions_from_messages(messages, model="gpt-3.5-turbo", stream=True):
    client = OpenAI()
    try:
        return client.chat.completions.create(
            messages=messages,
            model=model,
            stream=stream
        )
    except RateLimitError:
        st.error("üö´ Rate limit reached. Please wait a few seconds and try again.")
        return None
    except Exception as e:
        st.error(f"‚ùå Unexpected error: {e}")
        return None

# ----------------- STREAMLIT APP -----------------
def main():
    st.title("NaijaFarmConsultAI - Crop Disease")
    st.write("Upload an image of your crop to detect disease and get instant expert advice.")

    uploaded_file = st.file_uploader("Upload a crop image", type=["jpg", "jpeg", "png"])

    if uploaded_file:
        st.image(uploaded_file, caption="Your Uploaded Image", use_column_width=True)

        if st.button("Diagnose Disease"):
            with st.spinner("Running diagnosis..."):
                disease_prediction = predict_disease(uploaded_file)
            st.success(f"Predicted Disease: **{disease_prediction}**")

            # Generate prompt for AI advice
            prompt = f"""
            A Nigerian farmer uploaded a photo and you diagnosed the crop disease as **{disease_prediction}**.

            As NaijaFarmConsultAI, explain:
            - What this disease is and how it affects the crop.
            - 2 or 3 simple treatments or control strategies.
            - One practical prevention tip.

            Use simple, clear, local language, and sound like a friendly extension officer.
            """

            try:
                with st.spinner("NaijaFarmConsultAI is writing advice..."):
                    response = openai.ChatCompletion.create(
                        model="gpt-3.5-turbo",
                        messages=[
                            {"role": "system", "content": "You are a helpful agricultural advisor for Nigerian farmers."},
                            {"role": "user", "content": prompt}
                        ],
                        temperature=0.7,
                        max_tokens=500
                    )
                    advice = response.choices[0].message["content"]
                    st.markdown("###NaijaFarmConsultAI Advice")
                    st.info(advice)

            except openai.error.RateLimitError:
                st.error("üö´ Rate limit reached. Please wait a few seconds and try again.")
            except Exception as e:
                st.error(f"‚ùå Something went wrong: {e}")

    st.markdown("---")
    st.caption("Powered by PyTorch + EfficientNet + OpenAI | Built with ‚ù§Ô∏è for Nigerian Farmers")

if __name__ == "__main__":
    main()
